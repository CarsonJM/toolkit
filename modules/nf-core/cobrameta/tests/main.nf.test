nextflow_process {

    name "Test Process COBRAMETA"
    script "../main.nf"
    process "COBRAMETA"

    tag "modules"
    tag "modules_nfcore"
    tag "cobrameta"


    test("fasta.gz & coverage.tsv & viral_contigs & bam") {
        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test'],
                    file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/text/test1_contig_coverage.tsv", checkIfExists: true)
                ]
                input[2] = [
                    [ id:'test'],
                    file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/text/test1_contig_names.tsv", checkIfExists: true)
                ]
                input[3] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/bam/test1_contigs.sorted.bam', checkIfExists: true)
                ]
                input[4] = 'megahit'
                input[5] = 21
                input[6] = 141
                """
            }
        }
        then {
            assertAll (
                { assert process.success },
                { assert snapshot(
                    process.out.fasta,
                    file(process.out.log[0][1]).name,
                    process.out.joining_summary,
                    process.out.versions
                    ).match()
                }
            )
        }
    }

    test("stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/fasta/test1.contigs.fa.gz', checkIfExists: true)
                ]
                input[1] = [
                    [ id:'test'],
                    file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/text/test1_contig_coverage.tsv", checkIfExists: true)
                ]
                input[2] = [
                    [ id:'test'],
                    file("${projectDir}/assets/test-datasets/genomics/prokaryotes/bacteroides_fragilis/text/test1_contig_names.tsv", checkIfExists: true)
                ]
                input[3] = [
                    [ id:'test'],
                    file(params.modules_testdata_base_path + 'genomics/prokaryotes/bacteroides_fragilis/illumina/bam/test1_contigs.sorted.bam', checkIfExists: true)
                ]
                input[4] = 'megahit'
                input[5] = 21
                input[6] = 141
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
