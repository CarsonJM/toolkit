nextflow_process {

    name "Test Process MEGAHIT_MEGAHIT"
    script "../main.nf"
    process "MEGAHIT_MEGAHIT"

    tag "modules"
    tag "modules_nfcore"
    tag "megahit"
    tag "megahit/megahit"

    test("sarscov2 - fastq - se") {
        when {
            process {
                """
                input[0] = [
                    [id:"test", single_end:true],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert process.out.k_contigs[0][1].each{path(it).linesGzip.toString().contains(">k")}},
                { assert process.out.addi_contigs[0][1].each{path(it).linesGzip.toString().contains(">k")}},
                { assert process.out.local_contigs[0][1].each{path(it).linesGzip.toString().contains(">k")}},
                { assert process.out.kfinal_contigs[0][1].each{path(it).linesGzip.toString().contains(">k")}},
                { assert snapshot(
                    process.out.contigs,
                    process.out.gfa,
                    process.out.min_kmer,
                    process.out.max_kmer,
                    process.out.versions,
                    file(process.out.log[0][1]).name
                    ).match()
                }
            )
        }
    }

    test("sarscov2 - fastq - pe") {
        when {
            process {
                """
                input[0] = [
                    [id:"test", single_end:false],
                    [
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true),
                        file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_2.fastq.gz', checkIfExists: true)
                    ]
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert process.out.k_contigs[0][1].each{path(it).linesGzip.toString().contains(">k")}},
                { assert process.out.addi_contigs[0][1].each{path(it).linesGzip.toString().contains(">k")}},
                { assert process.out.local_contigs[0][1].each{path(it).linesGzip.toString().contains(">k")}},
                { assert process.out.kfinal_contigs[0][1].each{path(it).linesGzip.toString().contains(">k")}},
                { assert snapshot(
                    process.out.contigs,
                    process.out.gfa,
                    process.out.min_kmer,
                    process.out.max_kmer,
                    process.out.versions,
                    file(process.out.log[0][1]).name
                    ).match()
                }
            )
        }
    }

    test("stub") {
        options "-stub"
        when {
            process {
                """
                input[0] = [
                    [id:"test", single_end:true],
                    file(params.modules_testdata_base_path + 'genomics/sarscov2/illumina/fastq/test_1.fastq.gz', checkIfExists: true)
                ]
                """
            }
        }
        then {
            assertAll(
                { assert process.success },
                { assert snapshot(process.out).match() }
            )
        }
    }
}
